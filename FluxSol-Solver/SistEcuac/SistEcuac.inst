
namespace FluxSol
{
template
int FluxSol::Eqn<Scalar>::Width();

template
int FluxSol::Eqn<Scalar>::MinNeigbourId();

template
Eqn<Scalar> Eqn<Scalar>::operator-();

template
Eqn<Vec3D> Eqn<Vec3D>::operator-();

template
void FluxSol::EqnSystem<Scalar>::Insert (const FluxSol::Eqn <Scalar> &ec);

template
Eqn<Scalar> & Eqn<Scalar>::operator ==(const Eqn<Scalar> &right);

template
Eqn<Vec3D> & Eqn<Vec3D>::operator -(const Eqn<Vec3D> &right);

template
Eqn<Scalar> & Eqn<Scalar>::operator -(const Eqn<Scalar> &right);

template
Eqn<Vec3D> & Eqn<Vec3D>::operator +(const Eqn<Vec3D> &right);

template
Eqn<Scalar> & Eqn<Scalar>::operator +(const Eqn<Scalar> &right);

template
EqnSystem <Scalar> & EqnSystem <Scalar>::operator==(const double &d);

template
void EqnSystem<Scalar>::Log(std::string str);

template
EqnSystem<Scalar>::EqnSystem(const Fv_CC_Grid &FvG);

template
EqnSystem <Scalar> & EqnSystem <Scalar>::operator==(const EqnSystem <Scalar> &right);

template
int FluxSol::Eqn<Vec3D>::Width();

template
int FluxSol::Eqn<Vec3D>::MinNeigbourId();

template
void FluxSol::EqnSystem<Vec3D>::Insert (const FluxSol::Eqn <Vec3D> &ec);

template
Eqn<Vec3D> & Eqn<Vec3D>::operator ==(const Eqn<Vec3D> &right);

template
EqnSystem <Vec3D> & EqnSystem <Vec3D>::operator==(const double &d);

template
void EqnSystem<Vec3D>::Log(std::string str);

template
EqnSystem<Vec3D>::EqnSystem(const Fv_CC_Grid &FvG);

template
EqnSystem <Vec3D> & EqnSystem <Vec3D>::operator==(const EqnSystem <Vec3D> &right);

template
EqnSystem <Scalar> & EqnSystem<Scalar>::operator==(const _CC_Fv_Field<Scalar> &field);

template
EqnSystem <Scalar> EqnSystem<Scalar>::operator-(const EqnSystem<Scalar> &);

template
EqnSystem <Scalar> EqnSystem<Scalar>::operator+(const EqnSystem<Scalar> &);

template
EqnSystem <Vec3D> & EqnSystem<Vec3D>::operator==(const _CC_Fv_Field<Vec3D> &field);

template
EqnSystem <Scalar> & EqnSystem<Scalar>::operator=(const EqnSystem <Scalar> &right);

template
EqnSystem <Vec3D> & EqnSystem<Vec3D>::operator=(const EqnSystem <Vec3D> &right);

template
EqnSystem <Vec3D> EqnSystem<Vec3D>::operator- (const EqnSystem<Vec3D> &);

template
EqnSystem <Vec3D> EqnSystem<Vec3D>::operator+ (const EqnSystem<Vec3D> &);

template
const vector<double> EqnSystem<Vec3D>::GlobalRes()const;

template
const vector<double> EqnSystem<Scalar>::GlobalRes()const;

}
